D G "__PCM__" 0 26 ""5.015""
D G "__DEVICE__" 0 26 "1827"
D G "__DATE__" 0 26 ""30-mar.-21""
D G "__TIME__" 0 26 ""13:41:52"" "Standard Header file for the PIC16F1827 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 39 "int8" `54 
f B "set_tris_a" 2 39 "void(int8 value)" `53 
v L "value" 2 40 "int8" `56 
f B "set_tris_b" 2 40 "void(int8 value)" `55 
f B "get_tris_a" 2 41 "int8()" `57 
f B "get_tris_b" 2 42 "int8()" `58 
v L "value" 2 43 "int8" `60 
f B "output_a" 2 43 "void(int8 value)" `59 
v L "value" 2 44 "int8" `62 
f B "output_b" 2 44 "void(int8 value)" `61 
f B "input_a" 2 45 "int8()" `63 
f B "input_b" 2 46 "int8()" `64 
f B "input_change_a" 2 47 "int8()" `65 
f B "input_change_b" 2 48 "int8()" `66 
v L "pin" 2 49 "int16" `68 
f B "input" 2 49 "int8(int16 pin)" `67 
v L "pin" 2 50 "int16" `70 
f B "input_state" 2 50 "int8(int16 pin)" `69 
v L "pin" 2 51 "int16" `72 
f B "output_low" 2 51 "void(int16 pin)" `71 
v L "pin" 2 52 "int16" `74 
f B "output_high" 2 52 "void(int16 pin)" `73 
v L "pin" 2 53 "int16" `76 
f B "output_toggle" 2 53 "void(int16 pin)" `75 
v L "pin" 2 54 "int16" `78 
v L "level" 2 54 "int8" `79 
f B "output_bit" 2 54 "void(int16 pin,int8 level)" `77 
v L "pin" 2 55 "int16" `81 
f B "output_float" 2 55 "void(int16 pin)" `80 
v L "pin" 2 56 "int16" `83 
f B "output_drive" 2 56 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 60 "96"
d G "PIN_A1" 2 61 "97"
d G "PIN_A2" 2 62 "98"
d G "PIN_A3" 2 63 "99"
d G "PIN_A4" 2 64 "100"
d G "PIN_A5" 2 65 "101"
d G "PIN_A6" 2 66 "102"
d G "PIN_A7" 2 67 "103"
d G "PIN_B0" 2 69 "104"
d G "PIN_B1" 2 70 "105"
d G "PIN_B2" 2 71 "106"
d G "PIN_B3" 2 72 "107"
d G "PIN_B4" 2 73 "108"
d G "PIN_B5" 2 74 "109"
d G "PIN_B6" 2 75 "110"
d G "PIN_B7" 2 76 "111"
d G "FALSE" 2 79 "0"
d G "TRUE" 2 80 "1"
d G "BYTE" 2 82 "int8"
d G "BOOLEAN" 2 83 "int1"
d G "getc" 2 85 "getch"
d G "fgetc" 2 86 "getch"
d G "getchar" 2 87 "getch"
d G "putc" 2 88 "putchar"
d G "fputc" 2 89 "putchar"
d G "fgets" 2 90 "gets"
d G "fputs" 2 91 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 96 "int8()" `84 
f B "reset_cpu" 2 97 "void()" `85 
f B "sleep" 2 98 "void()" `86  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 100 "0x3C"
d G "BROWNOUT_RESTART" 2 101 "0x3E"
d G "MCLR_FROM_SLEEP" 2 102 "0x27"
d G "WDT_TIMEOUT" 2 103 "0x1F"
d G "WDT_FROM_SLEEP" 2 104 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 105 "0x2F"
d G "MCLR_FROM_RUN" 2 106 "0x37"
d G "RESET_INSTRUCTION" 2 107 "0x3B"
d G "STACK_OVERFLOW" 2 108 "0xBF"
d G "STACK_UNDERFLOW" 2 109 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 116 "int8" `88 
f B "setup_timer_0" 2 116 "void(int8 mode)" `87 
v L "value" 2 117 "int8" `90 
f B "set_timer0" 2 117 "void(int8 value)" `89 
f B "get_timer0" 2 118 "int8()" `91 
v L "mode" 2 119 "int8" `93 
v L "prescaler" 2 119 "int8" `94 
f B "setup_counters" 2 119 "void(int8 mode,int8 prescaler)" `92 
v L "value" 2 120 "int8" `96 
f B "set_rtcc" 2 120 "void(int8 value)" `95 
f B "get_rtcc" 2 121 "int8()" `97  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 123 "0"
d G "T0_EXT_L_TO_H" 2 124 "32"
d G "T0_EXT_H_TO_L" 2 125 "48"
d G "T0_DIV_1" 2 127 "8"
d G "T0_DIV_2" 2 128 "0"
d G "T0_DIV_4" 2 129 "1"
d G "T0_DIV_8" 2 130 "2"
d G "T0_DIV_16" 2 131 "3"
d G "T0_DIV_32" 2 132 "4"
d G "T0_DIV_64" 2 133 "5"
d G "T0_DIV_128" 2 134 "6"
d G "T0_DIV_256" 2 135 "7"
d G "T0_8_BIT" 2 138 "0"
d G "RTCC_INTERNAL" 2 140 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 141 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 142 "48"
d G "RTCC_DIV_1" 2 143 "8"
d G "RTCC_DIV_2" 2 144 "0"
d G "RTCC_DIV_4" 2 145 "1"
d G "RTCC_DIV_8" 2 146 "2"
d G "RTCC_DIV_16" 2 147 "3"
d G "RTCC_DIV_32" 2 148 "4"
d G "RTCC_DIV_64" 2 149 "5"
d G "RTCC_DIV_128" 2 150 "6"
d G "RTCC_DIV_256" 2 151 "7"
d G "RTCC_8_BIT" 2 152 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
v L "mode" 2 162 "int16" `99 
f B "setup_wdt" 2 162 "void(int16 mode)" `98 
f B "restart_wdt" 2 163 "void()" `100  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 165 "0x1000"
d G "WDT_OFF" 2 166 "0x2000"
d G "WDT_1MS" 2 168 "0x100"
d G "WDT_2MS" 2 169 "0x101"
d G "WDT_4MS" 2 170 "0x102"
d G "WDT_8MS" 2 171 "0x103"
d G "WDT_16MS" 2 172 "0x104"
d G "WDT_32MS" 2 173 "0x105"
d G "WDT_64MS" 2 174 "0x106"
d G "WDT_128MS" 2 175 "0x107"
d G "WDT_256MS" 2 176 "0x108"
d G "WDT_512MS" 2 177 "0x109"
d G "WDT_1S" 2 178 "0x10A"
d G "WDT_2S" 2 179 "0x10B"
d G "WDT_4S" 2 180 "0x10C"
d G "WDT_8S" 2 181 "0x10D"
d G "WDT_16S" 2 182 "0x10E"
d G "WDT_32S" 2 183 "0x10F"
d G "WDT_64S" 2 184 "0x110"
d G "WDT_128S" 2 185 "0x111"
d G "WDT_256S" 2 186 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 191 "int16" `102 
f B "setup_timer_1" 2 191 "void(int16 mode)" `101 
f B "get_timer1" 2 192 "int16()" `103 
v L "value" 2 193 "int16" `105 
f B "set_timer1" 2 193 "void(int16 value)" `104  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 196 "0"
d G "T1_CAPSENSE" 2 197 "0xC5"
d G "T1_EXTERNAL" 2 198 "0x85"
d G "T1_EXTERNAL_SYNC" 2 199 "0x81"
d G "T1_FOSC" 2 200 "0x45"
d G "T1_INTERNAL" 2 201 "0x05"
d G "T1_ENABLE_T1OSC" 2 203 "0x08"
d G "T1_DIV_BY_1" 2 205 "0x00"
d G "T1_DIV_BY_2" 2 206 "0x10"
d G "T1_DIV_BY_4" 2 207 "0x20"
d G "T1_DIV_BY_8" 2 208 "0x30"
d G "T1_GATE" 2 210 "0x8000"
d G "T1_GATE_INVERTED" 2 211 "0xC000"
d G "T1_GATE_TOGGLE" 2 212 "0xA000"
d G "T1_GATE_SINGLE" 2 213 "0x9000"
d G "T1_GATE_TIMER0" 2 214 "0x8100"
d G "T1_GATE_COMP1" 2 215 "0x8200"
d G "T1_GATE_COMP2" 2 216 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 221 "int8" `107 
v L "period" 2 221 "int8" `108 
v L "postscale" 2 221 "int8" `109 
f B "setup_timer_2" 2 221 "void(int8 mode,int8 period,int8 postscale)" `106 
f B "get_timer2" 2 222 "int8()" `110 
v L "value" 2 223 "int8" `112 
f B "set_timer2" 2 223 "void(int8 value)" `111  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 225 "0"
d G "T2_DIV_BY_1" 2 226 "4"
d G "T2_DIV_BY_4" 2 227 "5"
d G "T2_DIV_BY_16" 2 228 "6"
d G "T2_DIV_BY_64" 2 229 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 234 "int16" `114 
v L "period" 2 234 "int8" `115 
v L "postscaler" 2 234 "int8" `116 
f B "setup_timer_4" 2 234 "void(int16 mode,int8 period,int8 postscaler)" `113 
f B "get_timer4" 2 235 "int8()" `117 
v L "value" 2 236 "int8" `119 
f B "set_timer4" 2 236 "void(int8 value)" `118  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 238 "0"
d G "T4_DIV_BY_1" 2 239 "4"
d G "T4_DIV_BY_4" 2 240 "5"
d G "T4_DIV_BY_16" 2 241 "6"
d G "T4_DIV_BY_64" 2 242 "7"
c L "set_timer4" 2 3 3 "FUNCTION"
v L "mode" 2 247 "int8" `121 
v L "period" 2 247 "int8" `122 
v L "postscaler" 2 247 "int8" `123 
f B "setup_timer_6" 2 247 "void(int8 mode,int8 period,int8 postscaler)" `120 
f B "get_timer6" 2 248 "int8()" `124 
v L "value" 2 249 "int8" `126 
f B "set_timer6" 2 249 "void(int8 value)" `125  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 252 "0"
d G "T6_DIV_BY_1" 2 253 "4"
d G "T6_DIV_BY_4" 2 254 "5"
d G "T6_DIV_BY_16" 2 255 "6"
d G "T6_DIV_BY_64" 2 256 "7"
c L "set_timer6" 2 3 4 "FUNCTION"
v L "mode" 2 262 "int32" `128 
f B "setup_ccp1" 2 262 "void(int32 mode)" `127 
v L "mode" 2 263 "int32" `130 
v L "pwm" 2 263 "int8" `131 
f G "setup_ccp1" 2 263 "void(int32 mode,int8 pwm)" `129 
v L "value" 2 264 "int16" `133 
f B "set_pwm1_duty" 2 264 "void(int16 value)" `132  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 266 "0"
d G "CCP_CAPTURE_FE" 2 267 "4"
d G "CCP_CAPTURE_RE" 2 268 "5"
d G "CCP_CAPTURE_DIV_4" 2 269 "6"
d G "CCP_CAPTURE_DIV_16" 2 270 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 271 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 272 "9"
d G "CCP_COMPARE_INT" 2 273 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 274 "0xB"
d G "CCP_PWM" 2 275 "0xC"
d G "CCP_PWM_PLUS_1" 2 276 "0x1c"
d G "CCP_PWM_PLUS_2" 2 277 "0x2c"
d G "CCP_PWM_PLUS_3" 2 278 "0x3c"
d G "CCP_PWM_H_H" 2 283 "0x0c"
d G "CCP_PWM_H_L" 2 284 "0x0d"
d G "CCP_PWM_L_H" 2 285 "0x0e"
d G "CCP_PWM_L_L" 2 286 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 288 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 289 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 290 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 292 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 293 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 294 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 295 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 296 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 297 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 298 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 300 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 301 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 302 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 304 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 305 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 306 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 308 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 310 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 311 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 312 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 313 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 314 "0x10000000"
d G "CCP_TIMER2" 2 317 "0x0000"
d G "CCP_TIMER4" 2 318 "0x1000"
d G "CCP_TIMER6" 2 319 "0x2000"
d G "CCP1_B3" 2 321 "0x00"
d G "CCP1_B0" 2 322 "0x100"
d G "CCP2_B6" 2 323 "0x00"
d G "CCP2_A7" 2 324 "0x100"
d G "CCP_P1A_B3" 2 325 "0x000"
d G "CCP_P1A_B0" 2 326 "0x100"
d G "CCP_P1C_B6" 2 327 "0x000"
d G "CCP_P1C_A7" 2 328 "0x200"
d G "CCP_P1D_B7" 2 329 "0x000"
d G "CCP_P1D_A6" 2 330 "0x400"
d G "CCP_P2B_B7" 2 331 "0x000"
d G "CCP_P2B_A6" 2 332 "0x200"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 336 "int32" `138 
f B "setup_ccp2" 2 336 "void(int32 mode)" `137 
v L "mode" 2 337 "int32" `140 
v L "pwm" 2 337 "int8" `141 
f G "setup_ccp2" 2 337 "void(int32 mode,int8 pwm)" `139 
v L "value" 2 338 "int16" `143 
f B "set_pwm2_duty" 2 338 "void(int16 value)" `142 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
v L "mode" 2 344 "int32" `148 
f B "setup_ccp3" 2 344 "void(int32 mode)" `147 
v L "mode" 2 345 "int32" `150 
v L "pwm" 2 345 "int8" `151 
f G "setup_ccp3" 2 345 "void(int32 mode,int8 pwm)" `149 
v L "value" 2 346 "int16" `153 
f B "set_pwm3_duty" 2 346 "void(int16 value)" `152 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
v L "mode" 2 352 "int32" `158 
f B "setup_ccp4" 2 352 "void(int32 mode)" `157 
v L "mode" 2 353 "int32" `160 
v L "pwm" 2 353 "int8" `161 
f G "setup_ccp4" 2 353 "void(int32 mode,int8 pwm)" `159 
v L "value" 2 354 "int16" `163 
f B "set_pwm4_duty" 2 354 "void(int16 value)" `162 
c L "set_pwm4_duty" 2 3 3 "FUNCTION"
v L "mode" 2 361 "int32" `168 
f B "setup_spi" 2 361 "void(int32 mode)" `167 
v L "value" 2 362 "int8" `170 
f B "spi_write" 2 362 "void(int8 value)" `169 
f B "spi_read" 2 363 "int8()" `171 
v L "value" 2 364 "int8" `173 
f G "spi_read" 2 364 "int8(int8 value)" `172 
f B "spi_data_in" 2 365 "int8()" `174 
v L "mode" 2 366 "int32" `176 
f B "setup_spi2" 2 366 "void(int32 mode)" `175 
v L "value" 2 367 "int8" `178 
f B "spi_write2" 2 367 "void(int8 value)" `177 
f B "spi_read2" 2 368 "int8()" `179 
v L "value" 2 369 "int8" `181 
f G "spi_read2" 2 369 "int8(int8 value)" `180 
f B "spi_data_in2" 2 370 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 372 "0x00"
d G "SPI_MASTER" 2 373 "0x20"
d G "SPI_SLAVE" 2 374 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 375 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 376 "0x00"
d G "SPI_CLK_DIV_4" 2 377 "0x00"
d G "SPI_CLK_DIV_16" 2 378 "0x01"
d G "SPI_CLK_DIV_64" 2 379 "0x02"
d G "SPI_CLK_T2" 2 380 "0x03"
d G "SPI_SS_DISABLED" 2 381 "0x01"
d G "SPI_SS_B5" 2 383 "0x000"
d G "SPI_SS_A5" 2 384 "0x10000"
d G "SPI_DO_B2" 2 385 "0x000"
d G "SPI_DO_A6" 2 386 "0x20000"
d G "SPI_XMIT_L_TO_H" 2 388 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 389 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 391 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 392 "0x8000"
d G "SPI_L_TO_H" 2 395 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 396 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 400 "int32" `184 
f B "setup_uart" 2 400 "void(int32 baud)" `183 
v L "baud" 2 401 "int32" `186 
v L "stream" 2 401 "int8" `187 
f G "setup_uart" 2 401 "void(int32 baud,int8 stream)" `185 
v L "baud" 2 402 "int32" `189 
v L "stream" 2 402 "int8" `190 
v L "clock" 2 402 "int32" `191 
f G "setup_uart" 2 402 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 2 403 "int32" `193 
f B "set_uart_speed" 2 403 "void(int32 baud)" `192 
v L "baud" 2 404 "int32" `195 
v L "stream" 2 404 "int8" `196 
f G "set_uart_speed" 2 404 "void(int32 baud,int8 stream)" `194 
v L "baud" 2 405 "int32" `198 
v L "stream" 2 405 "int8" `199 
v L "clock" 2 405 "int32" `200 
f G "set_uart_speed" 2 405 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 409 "2"
d G "UART_DATA" 2 410 "4"
d G "UART_AUTODETECT" 2 411 "8"
d G "UART_AUTODETECT_NOWAIT" 2 412 "9"
d G "UART_WAKEUP_ON_RDA" 2 413 "10"
d G "UART_SEND_BREAK" 2 414 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 418 "int32" `202 
f B "setup_comparator" 2 418 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 421 "0x00"
d G "CP1_A0_A3" 2 424 "0x8000"
d G "CP1_A1_A3" 2 425 "0x8001"
d G "CP1_A2_A3" 2 426 "0x8002"
d G "CP1_A3_A3" 2 427 "0x8003"
d G "CP1_A0_DAC" 2 428 "0x8010"
d G "CP1_A1_DAC" 2 429 "0x8011"
d G "CP1_A2_DAC" 2 430 "0x8012"
d G "CP1_A3_DAC" 2 431 "0x8013"
d G "CP1_A0_FVR" 2 432 "0x8020"
d G "CP1_A1_FVR" 2 433 "0x8021"
d G "CP1_A2_FVR" 2 434 "0x8022"
d G "CP1_A3_FVR" 2 435 "0x8023"
d G "CP1_A0_A2" 2 436 "0x8030"
d G "CP1_A1_A2" 2 437 "0x8031"
d G "CP1_A2_A2" 2 438 "0x8032"
d G "CP1_A3_A2" 2 439 "0x8033"
d G "CP1_INT_H2L" 2 441 "0x0040"
d G "CP1_INT_L2H" 2 442 "0x0080"
d G "CP1_OUT_ON_A3" 2 443 "0x2000"
d G "CP1_INVERT" 2 444 "0x1000"
d G "CP1_FAST" 2 445 "0x0400"
d G "CP1_HYST" 2 446 "0x0200"
d G "CP1_SYNC" 2 447 "0x0100"
d G "CP2_A0_A2" 2 450 "0x80000000"
d G "CP2_A1_A2" 2 451 "0x80010000"
d G "CP2_A2_A2" 2 452 "0x80020000"
d G "CP2_A3_A2" 2 453 "0x80030000"
d G "CP2_A0_DAC" 2 454 "0x80100000"
d G "CP2_A1_DAC" 2 455 "0x80110000"
d G "CP2_A2_DAC" 2 456 "0x80120000"
d G "CP2_A3_DAC" 2 457 "0x80130000"
d G "CP2_A0_FVR" 2 458 "0x80200000"
d G "CP2_A1_FVR" 2 459 "0x80210000"
d G "CP2_A2_FVR" 2 460 "0x80220000"
d G "CP2_A3_FVR" 2 461 "0x80230000"
d G "CP2_A0_VSS" 2 462 "0x80300000"
d G "CP2_A1_VSS" 2 463 "0x80310000"
d G "CP2_A2_VSS" 2 464 "0x80320000"
d G "CP2_A3_VSS" 2 465 "0x80330000"
d G "CP2_INT_H2L" 2 467 "0x00400000"
d G "CP2_INT_L2H" 2 468 "0x00800000"
d G "CP2_OUT_ON_A4" 2 469 "0x20000000"
d G "CP2_INVERT" 2 470 "0x10000000"
d G "CP2_FAST" 2 471 "0x04000000"
d G "CP2_HYST" 2 472 "0x02000000"
d G "CP2_SYNC" 2 473 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 480 "int8" `206 
f B "setup_vref" 2 480 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 482 "0"
d G "VREF_ON" 2 483 "0x80"
d G "VREF_ADC_OFF" 2 485 "0"
d G "VREF_ADC_1v024" 2 486 "0x01"
d G "VREF_ADC_2v048" 2 487 "0x02"
d G "VREF_ADC_4v096" 2 488 "0x03"
d G "VREF_COMP_DAC_OFF" 2 490 "0"
d G "VREF_COMP_DAC_1v024" 2 491 "0x04"
d G "VREF_COMP_DAC_2v048" 2 492 "0x08"
d G "VREF_COMP_DAC_4v096" 2 493 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 495 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 496 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 497 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 498 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 503 "int8" `208 
f B "setup_dac" 2 503 "void(int8 mode)" `207 
v L "value" 2 504 "int8" `210 
f B "dac_write" 2 504 "void(int8 value)" `209  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 506 "0"
d G "DAC_VSS_VDD" 2 507 "0x80"
d G "DAC_VREF_VDD" 2 508 "0x81"
d G "DAC_VSS_VREF" 2 509 "0x84"
d G "DAC_VREF_VREF" 2 510 "0x85"
d G "DAC_VSS_FVR" 2 511 "0x88"
d G "DAC_FVR_VREF" 2 512 "0x89"
d G "DAC_OUTPUT" 2 514 "0x20"
d G "DAC_LVP_POS" 2 515 "0x40"
d G "DAC_LVP_NEG" 2 516 "0"
c L "dac_write" 2 3 2 "FUNCTION"
v L "mode" 2 521 "int8" `212 
f B "setup_oscillator" 2 521 "void(int8 mode)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 524 "0"
d G "OSC_31250" 2 525 " (2*8)"
d G "OSC_62KHZ" 2 526 " (4*8)"
d G "OSC_125KHZ" 2 527 " (5*8)"
d G "OSC_250KHZ" 2 528 " (6*8)"
d G "OSC_500KHZ" 2 529 " (7*8)"
d G "OSC_1MHZ" 2 530 " (11*8)"
d G "OSC_2MHZ" 2 531 " (12*8)"
d G "OSC_4MHZ" 2 532 " (13*8)"
d G "OSC_8MHZ" 2 533 " (14*8)"
d G "OSC_16MHZ" 2 534 " (15*8)"
d G "OSC_TIMER1" 2 536 "1"
d G "OSC_INTRC" 2 537 "2"
d G "OSC_NORMAL" 2 538 "0"
d G "OSC_PLL_ON" 2 540 "0x80"
d G "OSC_PLL_OFF" 2 541 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 548 "int16" `214 
f B "setup_adc" 2 548 "void(int16 mode)" `213 
f B "read_adc" 2 549 "int8()" `215 
v L "mode" 2 550 "int8" `217 
f G "read_adc" 2 550 "int8(int8 mode)" `216 
f G "read_adc" 2 551 "int16()" `218 
v L "mode" 2 552 "int8" `220 
f G "read_adc" 2 552 "int16(int8 mode)" `219 
f B "adc_done" 2 553 "int8()" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 555 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 556 "0x100"
d G "ADC_CLOCK_DIV_4" 2 557 "0x40"
d G "ADC_CLOCK_DIV_8" 2 558 "0x10"
d G "ADC_CLOCK_DIV_32" 2 559 "0x20"
d G "ADC_CLOCK_DIV_16" 2 560 "0x50"
d G "ADC_CLOCK_DIV_64" 2 561 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 562 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 565 "int32" `223 
f B "setup_adc_ports" 2 565 "void(int32 pins)" `222 
v L "pins" 2 566 "int32" `225 
v L "reference" 2 566 "int32" `226 
f G "setup_adc_ports" 2 566 "void(int32 pins,int32 reference)" `224 
v L "channel" 2 567 "int8" `228 
f B "set_adc_channel" 2 567 "void(int8 channel)" `227  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 571 "0x000100" "| A0"
d G "sAN1" 2 572 "0x000200" "| A1"
d G "sAN2" 2 573 "0x000400" "| A2"
d G "sAN3" 2 574 "0x000800" "| A3"
d G "sAN4" 2 575 "0x001000" "| A4"
d G "sAN5" 2 576 "0x000040" "| B6"
d G "sAN6" 2 577 "0x000080" "| B7"
d G "sAN7" 2 578 "0x000020" "| B5"
d G "sAN8" 2 579 "0x000010" "| B4"
d G "sAN9" 2 580 "0x000008" "| B3"
d G "sAN10" 2 581 "0x000004" "| B2"
d G "sAN11" 2 582 "0x000002" "| B1"
d G "NO_ANALOGS" 2 583 "0" "None"
d G "ALL_ANALOG" 2 584 "0x001FFE" "A0 A1 A2 A3 A4 B6 B7 B5 B4 B3 B2 B1"
d G "VSS_VDD" 2 587 "0x000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 588 "0x020000" "| Range 0-VrefH"
d G "VSS_FVR" 2 589 "0x030000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 590 "0x040000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 591 "0x060000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 592 "0x070000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 2 596 "0x1D"
d G "DAC_CHANNEL" 2 597 "0x1E"
d G "FVR_CHANNEL" 2 598 "0x1F"
d G "ADC_START_AND_READ" 2 601 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 602 "1"
d G "ADC_READ_ONLY" 2 603 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 609 "sint8" `230 
f B "abs" 2 609 "sint8(sint8 x)" `229 
v L "x" 2 610 "sint16" `232 
f G "abs" 2 610 "sint16(sint16 x)" `231 
v L "x" 2 611 "sint32" `234 
f G "abs" 2 611 "sint32(sint32 x)" `233 
v L "x" 2 612 "float" `236 
f G "abs" 2 612 "float(float x)" `235 
v L "??65535" 2 613 "int8" `238 
v L "??65535" 2 613 "int8" `239 
f B "_mul" 2 613 "int16(int8 ,int8 )" `237 
v L "??65535" 2 614 "sint8" `238 
v L "??65535" 2 614 "sint8" `242 
f G "_mul" 2 614 "sint16(sint8 ,sint8 )" `240 
v L "??65535" 2 615 "int16" `238 
v L "??65535" 2 615 "int16" `245 
f G "_mul" 2 615 "int32(int16 ,int16 )" `243 
v L "??65535" 2 616 "sint16" `238 
v L "??65535" 2 616 "sint16" `248 
f G "_mul" 2 616 "sint32(sint16 ,sint16 )" `246  "Memory Manipulation Prototypes:"
v L "bank" 2 619 "int8" `250 
v L "offset" 2 619 "int8" `251 
f B "read_bank" 2 619 "int8(int8 bank,int8 offset)" `249 
v L "bank" 2 620 "int8" `253 
v L "offset" 2 620 "int8" `254 
v L "value" 2 620 "int8" `255 
f B "write_bank" 2 620 "void(int8 bank,int8 offset,int8 value)" `252 
v L "dest" 2 621 "*int8" `257 
v L "src" 2 621 "*int8" `258 
f B "strcpy" 2 621 "void(*int8 dest,*int8 src)" `256 
v L "dest" 2 622 "*int8" `260 
v L "src" 2 622 "*int8" `261 
f B "strcopy" 2 622 "void(*int8 dest,*int8 src)" `259 
v L "destination" 2 623 "*int8" `263 
v L "value" 2 623 "int8" `264 
v L "num" 2 623 "int16" `265 
f B "memset" 2 623 "void(*int8 destination,int8 value,int16 num)" `262 
v L "destination" 2 624 "*int8" `267 
v L "source" 2 624 "*int8" `268 
v L "num" 2 624 "int16" `269 
f B "memcpy" 2 624 "void(*int8 destination,*int8 source,int16 num)" `266  "String Prototypes:"
v L "cvalue" 2 627 "int8" `271 
f B "toupper" 2 627 "int8(int8 cvalue)" `270 
v L "cvalue" 2 628 "int8" `273 
f B "tolower" 2 628 "int8(int8 cvalue)" `272 
v L "string" 2 629 "*int8" `275 
v L "cstring" 2 629 "*int8" `276 
f B "sprintf" 2 629 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `274  "Data Manipulators Prototypes:"
v L "address" 2 632 "*int8" `279 
v L "bytes" 2 632 "int8" `280 
v L "value" 2 632 "int8" `281 
f B "shift_left" 2 632 "int8(*int8 address,int8 bytes,int8 value)" `278 
v L "address" 2 633 "*int8" `283 
v L "bytes" 2 633 "int8" `284 
v L "value" 2 633 "int8" `285 
f B "shift_right" 2 633 "int8(*int8 address,int8 bytes,int8 value)" `282 
v L "address" 2 634 "*int8" `287 
v L "bytes" 2 634 "int8" `288 
f B "rotate_left" 2 634 "void(*int8 address,int8 bytes)" `286 
v L "address" 2 635 "*int8" `290 
v L "bytes" 2 635 "int8" `291 
f B "rotate_right" 2 635 "void(*int8 address,int8 bytes)" `289 
v L "value" 2 636 "int8" `293 
f B "swap" 2 636 "void(int8 value)" `292 
v L "var" 2 637 "int16" `295 
v L "offset" 2 637 "int8" `296 
f B "make8" 2 637 "int8(int16 var,int8 offset)" `294 
v L "var" 2 638 "int32" `295 
v L "offset" 2 638 "int8" `299 
f G "make8" 2 638 "int8(int32 var,int8 offset)" `297 
v L "varhigh" 2 639 "int8" `301 
v L "varlow" 2 639 "int8" `302 
f B "make16" 2 639 "int16(int8 varhigh,int8 varlow)" `300 
v L "var1" 2 640 "int16" `304 
f B "make32" 2 640 "int32(int16 var1)" `303 
v L "var1" 2 641 "int16" `306 
v L "var2" 2 641 "int16" `307 
f G "make32" 2 641 "int32(int16 var1,int16 var2)" `305 
v L "var1" 2 642 "int16" `306 
v L "var2" 2 642 "int8" `310 
f G "make32" 2 642 "int32(int16 var1,int8 var2)" `308 
v L "var1" 2 643 "int16" `312 
v L "var2" 2 643 "int8" `313 
v L "var3" 2 643 "int8" `314 
f G "make32" 2 643 "int32(int16 var1,int8 var2,int8 var3)" `311 
v L "var1" 2 644 "int8" `316 
f G "make32" 2 644 "int32(int8 var1)" `315 
v L "var1" 2 645 "int8" `306 
v L "var2" 2 645 "int8" `319 
f G "make32" 2 645 "int32(int8 var1,int8 var2)" `317 
v L "var1" 2 646 "int8" `312 
v L "var2" 2 646 "int8" `313 
v L "var3" 2 646 "int8" `323 
f G "make32" 2 646 "int32(int8 var1,int8 var2,int8 var3)" `320 
v L "var1" 2 647 "int8" `325 
v L "var2" 2 647 "int8" `326 
v L "var3" 2 647 "int8" `327 
v L "var4" 2 647 "int8" `328 
f G "make32" 2 647 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `324 
v L "var1" 2 648 "int8" `306 
v L "var2" 2 648 "int16" `331 
f G "make32" 2 648 "int32(int8 var1,int16 var2)" `329 
v L "var1" 2 649 "int8" `312 
v L "var2" 2 649 "int16" `313 
v L "var3" 2 649 "int8" `335 
f G "make32" 2 649 "int32(int8 var1,int16 var2,int8 var3)" `332 
v L "var1" 2 650 "int8" `312 
v L "var2" 2 650 "int8" `313 
v L "var3" 2 650 "int16" `339 
f G "make32" 2 650 "int32(int8 var1,int8 var2,int16 var3)" `336 
v L "var" 2 651 "int8" `341 
v L "bit" 2 651 "int8" `342 
f B "bit_set" 2 651 "void(int8 var,int8 bit)" `340 
v L "var" 2 652 "int16" `341 
v L "bit" 2 652 "int8" `345 
f G "bit_set" 2 652 "void(int16 var,int8 bit)" `343 
v L "var" 2 653 "int32" `341 
v L "bit" 2 653 "int8" `348 
f G "bit_set" 2 653 "void(int32 var,int8 bit)" `346 
v L "var" 2 654 "int8" `350 
v L "bit" 2 654 "int8" `351 
f B "bit_clear" 2 654 "void(int8 var,int8 bit)" `349 
v L "var" 2 655 "int16" `350 
v L "bit" 2 655 "int8" `354 
f G "bit_clear" 2 655 "void(int16 var,int8 bit)" `352 
v L "var" 2 656 "int32" `350 
v L "bit" 2 656 "int8" `357 
f G "bit_clear" 2 656 "void(int32 var,int8 bit)" `355 
v L "var" 2 657 "int8" `359 
v L "bit" 2 657 "int8" `360 
f B "bit_test" 2 657 "int8(int8 var,int8 bit)" `358 
v L "var" 2 658 "int16" `359 
v L "bit" 2 658 "int8" `363 
f G "bit_test" 2 658 "int8(int16 var,int8 bit)" `361 
v L "var" 2 659 "int32" `359 
v L "bit" 2 659 "int8" `366 
f G "bit_test" 2 659 "int8(int32 var,int8 bit)" `364  "#use delay() Prototypes:"
v L "count" 2 662 "int8" `368 
f B "delay_cycles" 2 662 "void(int8 count)" `367 
v L "time" 2 663 "int16" `370 
f B "delay_ms" 2 663 "void(int16 time)" `369 
v L "time" 2 664 "int16" `372 
f B "delay_us" 2 664 "void(int16 time)" `371  "#use rs232() Prototypes:"
v L "cdata" 2 667 "int8" `374 
f B "putchar" 2 667 "void(int8 cdata)" `373 
v L "cdata" 2 668 "int8" `376 
v L "stream" 2 668 "int8" `377 
f G "putchar" 2 668 "void(int8 cdata,int8 stream)" `375 
v L "string" 2 669 "*int8" `379 
f B "puts" 2 669 "void(*int8 string)" `378 
v L "string" 2 670 "*int8" `381 
v L "stream" 2 670 "int8" `382 
f G "puts" 2 670 "void(*int8 string,int8 stream)" `380 
f B "getch" 2 671 "int8()" `383 
v L "stream" 2 672 "int8" `385 
f G "getch" 2 672 "int8(int8 stream)" `384 
v L "string" 2 673 "*int8" `387 
f B "gets" 2 673 "void(*int8 string)" `386 
v L "string" 2 674 "*int8" `389 
v L "stream" 2 674 "int8" `390 
f G "gets" 2 674 "void(*int8 string,int8 stream)" `388 
f B "kbhit" 2 675 "int8()" `391 
v L "stream" 2 676 "int8" `393 
f G "kbhit" 2 676 "int8(int8 stream)" `392 
v L "string" 2 677 "*int8" `395 
f B "printf" 2 677 "void(*int8 string,*int8 _VA_LIST)" `394 
v L "stream" 2 678 "int8" `398 
v L "string" 2 678 "*int8" `399 
f B "fprintf" 2 678 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `397 
f B "putc_send" 2 679 "void()" `401 
v L "stream" 2 680 "int8" `403 
f B "fputc_send" 2 680 "void(int8 stream)" `402 
f B "rcv_buffer_full" 2 681 "int8()" `404 
v L "stream" 2 682 "int8" `406 
f G "rcv_buffer_full" 2 682 "int8(int8 stream)" `405 
f B "rcv_buffer_bytes" 2 683 "int16()" `407 
v L "stream" 2 684 "int8" `409 
f G "rcv_buffer_bytes" 2 684 "int16(int8 stream)" `408 
f B "tx_buffer_full" 2 685 "int8()" `410 
v L "stream" 2 686 "int8" `412 
f G "tx_buffer_full" 2 686 "int8(int8 stream)" `411 
f B "tx_buffer_bytes" 2 687 "int16()" `413 
v L "stream" 2 688 "int8" `415 
f G "tx_buffer_bytes" 2 688 "int16(int8 stream)" `414  "#use i2c() Prototypes:"
f B "i2c_read" 2 691 "int8()" `416 
v L "stream" 2 692 "int8" `418 
f G "i2c_read" 2 692 "int8(int8 stream)" `417 
v L "stream" 2 693 "int8" `420 
v L "ack" 2 693 "int8" `421 
f G "i2c_read" 2 693 "int8(int8 stream,int8 ack)" `419 
v L "data" 2 694 "int8" `423 
f B "i2c_write" 2 694 "int8(int8 data)" `422 
v L "stream" 2 695 "int8" `425 
v L "data" 2 695 "int8" `426 
f G "i2c_write" 2 695 "int8(int8 stream,int8 data)" `424 
f B "i2c_start" 2 696 "void()" `427 
v L "stream" 2 697 "int8" `429 
f G "i2c_start" 2 697 "void(int8 stream)" `428 
v L "stream" 2 698 "int8" `431 
v L "restart" 2 698 "int8" `432 
f G "i2c_start" 2 698 "void(int8 stream,int8 restart)" `430 
f B "i2c_stop" 2 699 "void()" `433 
v L "stream" 2 700 "int8" `435 
f G "i2c_stop" 2 700 "void(int8 stream)" `434 
f B "i2c_isr_state" 2 701 "int8()" `436 
v L "addr" 2 702 "int8" `438 
f B "i2c_slaveaddr" 2 702 "void(int8 addr)" `437 
v L "stream" 2 703 "int8" `440 
v L "addr" 2 703 "int8" `441 
f G "i2c_slaveaddr" 2 703 "void(int8 stream,int8 addr)" `439 
f B "i2c_poll" 2 704 "int8()" `442 
v L "stream" 2 705 "int8" `444 
f G "i2c_poll" 2 705 "int8(int8 stream)" `443 
v L "baud" 2 706 "int32" `446 
f B "i2c_init" 2 706 "void(int32 baud)" `445 
v L "stream" 2 707 "int8" `448 
v L "baud" 2 707 "int32" `449 
f G "i2c_init" 2 707 "void(int8 stream,int32 baud)" `447  "#use spi() Prototypes:"
f B "spi_xfer" 2 710 "int8()" `450 
f G "spi_xfer" 2 711 "int16()" `451 
f G "spi_xfer" 2 712 "int32()" `452 
v L "data" 2 713 "int8" `454 
f G "spi_xfer" 2 713 "int8(int8 data)" `453 
v L "data" 2 714 "int16" `456 
f G "spi_xfer" 2 714 "int16(int16 data)" `455 
v L "data" 2 715 "int32" `458 
f G "spi_xfer" 2 715 "int32(int32 data)" `457 
v L "stream" 2 716 "int8" `460 
v L "data" 2 716 "int8" `461 
f G "spi_xfer" 2 716 "int8(int8 stream,int8 data)" `459 
v L "stream" 2 717 "int8" `460 
v L "data" 2 717 "int16" `464 
f G "spi_xfer" 2 717 "int16(int8 stream,int16 data)" `462 
v L "stream" 2 718 "int8" `460 
v L "data" 2 718 "int32" `467 
f G "spi_xfer" 2 718 "int32(int8 stream,int32 data)" `465 
v L "stream" 2 719 "int8" `469 
v L "data" 2 719 "int8" `470 
v L "bits" 2 719 "int8" `471 
f G "spi_xfer" 2 719 "int8(int8 stream,int8 data,int8 bits)" `468 
v L "stream" 2 720 "int8" `469 
v L "data" 2 720 "int16" `470 
v L "bits" 2 720 "int8" `475 
f G "spi_xfer" 2 720 "int16(int8 stream,int16 data,int8 bits)" `472 
v L "stream" 2 721 "int8" `469 
v L "data" 2 721 "int32" `470 
v L "bits" 2 721 "int8" `479 
f G "spi_xfer" 2 721 "int32(int8 stream,int32 data,int8 bits)" `476 
v L "baud" 2 722 "int32" `481 
f B "spi_init" 2 722 "void(int32 baud)" `480 
v L "stream" 2 723 "int8" `483 
v L "baud" 2 723 "int32" `484 
f G "spi_init" 2 723 "void(int8 stream,int32 baud)" `482 
v L "baud" 2 724 "int32" `486 
f B "spi_speed" 2 724 "void(int32 baud)" `485 
v L "stream" 2 725 "int8" `488 
v L "baud" 2 725 "int32" `489 
f G "spi_speed" 2 725 "void(int8 stream,int32 baud)" `487 
v L "stream" 2 726 "int8" `491 
v L "baud" 2 726 "int32" `492 
v L "clock" 2 726 "int32" `493 
f G "spi_speed" 2 726 "void(int8 stream,int32 baud,int32 clock)" `490 
v L "data" 2 727 "int8" `495 
f B "spi_prewrite" 2 727 "void(int8 data)" `494 
v L "data" 2 728 "int16" `497 
f G "spi_prewrite" 2 728 "void(int16 data)" `496 
v L "data" 2 729 "int32" `499 
f G "spi_prewrite" 2 729 "void(int32 data)" `498 
v L "??65535" 2 730 "int8" `501 
v L "data" 2 730 "int8" `502 
f G "spi_prewrite" 2 730 "void(int8 ,int8 data)" `500 
v L "??65535" 2 731 "int8" `501 
v L "data" 2 731 "int16" `505 
f G "spi_prewrite" 2 731 "void(int8 ,int16 data)" `503 
v L "??65535" 2 732 "int8" `501 
v L "data" 2 732 "int32" `508 
f G "spi_prewrite" 2 732 "void(int8 ,int32 data)" `506 
f B "spi_xfer_in" 2 733 "int8()" `509 
f G "spi_xfer_in" 2 734 "int16()" `510 
f G "spi_xfer_in" 2 735 "int32()" `511 
v L "bits" 2 736 "int8" `513 
f G "spi_xfer_in" 2 736 "int8(int8 bits)" `512 
v L "bits" 2 737 "int8" `515 
f G "spi_xfer_in" 2 737 "int16(int8 bits)" `514 
v L "bits" 2 738 "int8" `517 
f G "spi_xfer_in" 2 738 "int32(int8 bits)" `516 
v L "stream" 2 739 "int8" `519 
v L "bits" 2 739 "int8" `520 
f G "spi_xfer_in" 2 739 "int8(int8 stream,int8 bits)" `518 
v L "stream" 2 740 "int8" `519 
v L "bits" 2 740 "int8" `523 
f G "spi_xfer_in" 2 740 "int16(int8 stream,int8 bits)" `521 
v L "stream" 2 741 "int8" `519 
v L "bits" 2 741 "int8" `526 
f G "spi_xfer_in" 2 741 "int32(int8 stream,int8 bits)" `524  "#use rtos() Prototypes:"
f B "rtos_run" 2 744 "void()" `527 
f B "rtos_yield" 2 745 "void()" `528 
v L "task" 2 746 "int8" `530 
f B "rtos_enable" 2 746 "void(int8 task)" `529 
v L "task" 2 747 "int8" `532 
f B "rtos_disable" 2 747 "void(int8 task)" `531 
f B "rtos_terminate" 2 748 "void()" `533 
v L "flag" 2 749 "int8" `535 
f B "rtos_await" 2 749 "void(int8 flag)" `534 
v L "sem" 2 750 "int8" `537 
f B "rtos_wait" 2 750 "void(int8 sem)" `536 
v L "sem" 2 751 "int8" `539 
f B "rtos_signal" 2 751 "void(int8 sem)" `538 
v L "task" 2 752 "int8" `541 
v L "msg" 2 752 "int8" `542 
f B "rtos_msg_send" 2 752 "void(int8 task,int8 msg)" `540 
f B "rtos_msg_read" 2 753 "int8()" `543 
f B "rtos_msg_poll" 2 754 "int8()" `544 
v L "task" 2 755 "int8" `546 
f B "rtos_overrun" 2 755 "int8(int8 task)" `545 
v L "task" 2 756 "int8" `548 
v L "stat" 2 756 "*int8" `549 
f B "rtos_stats" 2 756 "void(int8 task,*int8 stat)" `547  "#use timer() Prototypes:"
f B "get_ticks" 2 759 "int8()" `550 
f G "get_ticks" 2 760 "int16()" `551 
f G "get_ticks" 2 761 "int32()" `552 
v L "stream" 2 762 "int8" `554 
f G "get_ticks" 2 762 "int8(int8 stream)" `553 
v L "stream" 2 763 "int8" `556 
f G "get_ticks" 2 763 "int16(int8 stream)" `555 
v L "stream" 2 764 "int8" `558 
f G "get_ticks" 2 764 "int32(int8 stream)" `557 
v L "value" 2 765 "int8" `560 
f B "set_ticks" 2 765 "void(int8 value)" `559 
v L "value" 2 766 "int16" `562 
f G "set_ticks" 2 766 "void(int16 value)" `561 
v L "value" 2 767 "int32" `564 
f G "set_ticks" 2 767 "void(int32 value)" `563 
v L "stream" 2 768 "int8" `566 
v L "value" 2 768 "int8" `567 
f G "set_ticks" 2 768 "void(int8 stream,int8 value)" `565 
v L "stream" 2 769 "int8" `566 
v L "value" 2 769 "int16" `570 
f G "set_ticks" 2 769 "void(int8 stream,int16 value)" `568 
v L "stream" 2 770 "int8" `566 
v L "value" 2 770 "int32" `573 
f G "set_ticks" 2 770 "void(int8 stream,int32 value)" `571  "#use pwm() Prototypes:"
f B "pwm_on" 2 773 "void()" `574 
v L "stream" 2 774 "int8" `576 
f G "pwm_on" 2 774 "void(int8 stream)" `575 
f B "pwm_off" 2 775 "void()" `577 
v L "stream" 2 776 "int8" `579 
f G "pwm_off" 2 776 "void(int8 stream)" `578 
v L "duty" 2 777 "int16" `581 
f B "pwm_set_duty" 2 777 "void(int16 duty)" `580 
v L "stream" 2 778 "int8" `583 
v L "duty" 2 778 "int16" `584 
f G "pwm_set_duty" 2 778 "void(int8 stream,int16 duty)" `582 
v L "percent" 2 779 "int16" `586 
f B "pwm_set_duty_percent" 2 779 "void(int16 percent)" `585 
v L "stream" 2 780 "int8" `588 
v L "percent" 2 780 "int16" `589 
f G "pwm_set_duty_percent" 2 780 "void(int8 stream,int16 percent)" `587 
v L "frequency" 2 781 "int32" `591 
f B "pwm_set_frequency" 2 781 "void(int32 frequency)" `590 
v L "stream" 2 782 "int8" `593 
v L "frequency" 2 782 "int32" `594 
f G "pwm_set_frequency" 2 782 "void(int8 stream,int32 frequency)" `592  "#use capture() Prototypes:"
f B "get_capture_time" 2 785 "int16()" `595 
v L "stream" 2 786 "int8" `597 
f G "get_capture_time" 2 786 "int16(int8 stream)" `596 
f B "get_capture_event" 2 787 "int8()" `598 
v L "stream" 2 788 "int8" `600 
f G "get_capture_event" 2 788 "int8(int8 stream)" `599  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 801 "int16" `602 
f B "goto_address" 2 801 "void(int16 address)" `601 
v L "label" 2 802 "int16" `604 
f B "label_address" 2 802 "int16(int16 label)" `603  "Program Memory Prototypes:"
v L "address" 2 805 "int16" `606 
v L "dataptr" 2 805 "*int8" `607 
v L "count" 2 805 "int16" `608 
f B "read_program_memory" 2 805 "void(int16 address,*int8 dataptr,int16 count)" `605 
v L "address" 2 806 "int16" `610 
f B "read_program_eeprom" 2 806 "int16(int16 address)" `609 
v L "address" 2 807 "int16" `612 
f B "erase_program_eeprom" 2 807 "void(int16 address)" `611 
v L "address" 2 808 "int16" `614 
v L "dataptr" 2 808 "*int8" `615 
v L "count" 2 808 "int16" `616 
f B "write_program_memory" 2 808 "void(int16 address,*int8 dataptr,int16 count)" `613 
v L "address" 2 809 "int16" `618 
v L "data" 2 809 "int16" `619 
f B "write_program_eeprom" 2 809 "void(int16 address,int16 data)" `617  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 814 "int16" `620 
v L "address" 2 819 "__EEADDRESS__" `622 
f B "read_eeprom" 2 819 "int8(__EEADDRESS__ address)" `621 
v L "address" 2 820 "__EEADDRESS__" `624 
v L "value" 2 820 "int8" `625 
f B "write_eeprom" 2 820 "void(__EEADDRESS__ address,int8 value)" `623  "#use touchpad() Prototypes:"
v L "state" 2 823 "int8" `627 
f B "touchpad_state" 2 823 "void(int8 state)" `626 
f B "touchpad_getc" 2 824 "int8()" `628 
f B "touchpad_hit" 2 825 "int8()" `629  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
v L "interrupt" 2 831 "int32" `631 
f B "enable_interrupts" 2 831 "void(int32 interrupt)" `630 
v L "interrupt" 2 832 "int32" `633 
f B "disable_interrupts" 2 832 "void(int32 interrupt)" `632 
v L "interrupt" 2 833 "int32" `635 
f B "clear_interrupt" 2 833 "void(int32 interrupt)" `634 
v L "interrupt" 2 834 "int32" `637 
f B "interrupt_active" 2 834 "int8(int32 interrupt)" `636 
v L "interrupt" 2 835 "int32" `639 
f B "interrupt_enabled" 2 835 "int8(int32 interrupt)" `638 
v L "source" 2 836 "int8" `641 
v L "edge" 2 836 "int8" `642 
f B "ext_int_edge" 2 836 "void(int8 source,int8 edge)" `640 
v L "address" 2 837 "int16" `644 
f B "jump_to_irs" 2 837 "void(int16 address)" `643  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 839 "0x40"
d G "H_TO_L" 2 840 "0"
d G "GLOBAL" 2 842 "0x0BC0"
d G "PERIPH" 2 843 "0x0B40"
d G "INT_RB" 2 844 "0x31FF0B08"
d G "INT_EXT_L2H" 2 845 "0x50000B10"
d G "INT_EXT_H2L" 2 846 "0x60000B10"
d G "INT_EXT" 2 847 "0x300B10"
d G "INT_TIMER0" 2 848 "0x300B20"
d G "INT_TIMER1" 2 849 "0x309101"
d G "INT_TIMER2" 2 850 "0x309102"
d G "INT_CCP1" 2 851 "0x309104"
d G "INT_SSP" 2 852 "0x309108"
d G "INT_TBE" 2 853 "0x309110"
d G "INT_RDA" 2 854 "0x309120"
d G "INT_AD" 2 855 "0x309140"
d G "INT_TIMER1_GATE" 2 856 "0x309180"
d G "INT_BUSCOL" 2 857 "0x309208"
d G "INT_EEPROM" 2 858 "0x309210"
d G "INT_COMP" 2 859 "0x309220"
d G "INT_COMP2" 2 860 "0x309240"
d G "INT_OSC_FAIL" 2 861 "0x309280"
d G "INT_TIMER4" 2 862 "0x309302"
d G "INT_TIMER6" 2 863 "0x309308"
d G "INT_CCP3" 2 864 "0x309310"
d G "INT_CCP4" 2 865 "0x309320"
d G "INT_CCP2" 2 866 "0x309201"
d G "INT_SSP2" 2 867 "0x309401"
d G "INT_BCL2" 2 868 "0x309402"
d G "INT_RB0" 2 869 "0x31010B08"
d G "INT_RB0_L2H" 2 870 "0x11010B08"
d G "INT_RB0_H2L" 2 871 "0x21010B08"
d G "INT_RB1" 2 872 "0x31020B08"
d G "INT_RB1_L2H" 2 873 "0x11020B08"
d G "INT_RB1_H2L" 2 874 "0x21020B08"
d G "INT_RB2" 2 875 "0x31040B08"
d G "INT_RB2_L2H" 2 876 "0x11040B08"
d G "INT_RB2_H2L" 2 877 "0x21040B08"
d G "INT_RB3" 2 878 "0x31080B08"
d G "INT_RB3_L2H" 2 879 "0x11080B08"
d G "INT_RB3_H2L" 2 880 "0x21080B08"
d G "INT_RB4" 2 881 "0x31100B08"
d G "INT_RB4_L2H" 2 882 "0x11100B08"
d G "INT_RB4_H2L" 2 883 "0x21100B08"
d G "INT_RB5" 2 884 "0x31200B08"
d G "INT_RB5_L2H" 2 885 "0x11200B08"
d G "INT_RB5_H2L" 2 886 "0x21200B08"
d G "INT_RB6" 2 887 "0x31400B08"
d G "INT_RB6_L2H" 2 888 "0x11400B08"
d G "INT_RB6_H2L" 2 889 "0x21400B08"
d G "INT_RB7" 2 890 "0x31800B08"
d G "INT_RB7_L2H" 2 891 "0x11800B08"
d G "INT_RB7_H2L" 2 892 "0x21800B08"
F G "main" 0 6 "void()" `649 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
